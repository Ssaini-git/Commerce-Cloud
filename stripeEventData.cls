//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

global class stripeEventData {

	public class Owner {
		public Object address {get;set;} 
		public String email {get;set;} 
		public Object name {get;set;} 
		public Object phone {get;set;} 
		public Object verified_address {get;set;} 
		public Object verified_email {get;set;} 
		public Object verified_name {get;set;} 
		public Object verified_phone {get;set;} 

		public Owner(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = parser.readValueAs(Object.class);
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'name') {
							name = parser.readValueAs(Object.class);
						} else if (text == 'phone') {
							phone = parser.readValueAs(Object.class);
						} else if (text == 'verified_address') {
							verified_address = parser.readValueAs(Object.class);
						} else if (text == 'verified_email') {
							verified_email = parser.readValueAs(Object.class);
						} else if (text == 'verified_name') {
							verified_name = parser.readValueAs(Object.class);
						} else if (text == 'verified_phone') {
							verified_phone = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Owner consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Object_Z {
		public String id {get;set;} 
		public String object_Z {get;set;} // in json: object
		public Ach_credit_transfer ach_credit_transfer {get;set;} 
		public Object amount {get;set;} 
		public String client_secret {get;set;} 
		public Integer created {get;set;} 
		public String currency_Z {get;set;} // in json: currency
		public String customer {get;set;} 
		public String flow {get;set;} 
		public Boolean livemode {get;set;} 
		public Metadata metadata {get;set;} 
		public Owner owner {get;set;} 
		public Receiver receiver {get;set;} 
		public Object statement_descriptor {get;set;} 
		public String status {get;set;} 
		public String type {get;set;} 
		public String usage {get;set;} 

		public Object_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'ach_credit_transfer') {
							ach_credit_transfer = new Ach_credit_transfer(parser);
						} else if (text == 'amount') {
							amount = parser.readValueAs(Object.class);
						} else if (text == 'client_secret') {
							client_secret = parser.getText();
						} else if (text == 'created') {
							created = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'customer') {
							customer = parser.getText();
						} else if (text == 'flow') {
							flow = parser.getText();
						} else if (text == 'livemode') {
							livemode = parser.getBooleanValue();
						} else if (text == 'metadata') {
							metadata = new Metadata(parser);
						} else if (text == 'owner') {
							owner = new Owner(parser);
						} else if (text == 'receiver') {
							receiver = new Receiver(parser);
						} else if (text == 'statement_descriptor') {
							statement_descriptor = parser.readValueAs(Object.class);
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'usage') {
							usage = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Object_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Metadata {

		public Metadata(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Metadata consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Request {
		public Object id {get;set;} 
		public String idempotency_key {get;set;} 

		public Request(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.readValueAs(Object.class);
						} else if (text == 'idempotency_key') {
							idempotency_key = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Request consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Receiver {
		public String address {get;set;} 
		public Integer amount_charged {get;set;} 
		public Integer amount_received {get;set;} 
		public Integer amount_returned {get;set;} 
		public String refund_attributes_method {get;set;} 
		public String refund_attributes_status {get;set;} 

		public Receiver(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = parser.getText();
						} else if (text == 'amount_charged') {
							amount_charged = parser.getIntegerValue();
						} else if (text == 'amount_received') {
							amount_received = parser.getIntegerValue();
						} else if (text == 'amount_returned') {
							amount_returned = parser.getIntegerValue();
						} else if (text == 'refund_attributes_method') {
							refund_attributes_method = parser.getText();
						} else if (text == 'refund_attributes_status') {
							refund_attributes_status = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Receiver consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public Object_Z object_Z {get;set;} // in json: object

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'object') {
							object_Z = new Object_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StripeEventData1 {
		public String id {get;set;} 
		public String object_Z {get;set;} // in json: object
		public String api_version {get;set;} 
		public Integer created {get;set;} 
		public Data data {get;set;} 
		public Boolean livemode {get;set;} 
		public Integer pending_webhooks {get;set;} 
		public Request request {get;set;} 
		public String type {get;set;} 

		public StripeEventData1(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'api_version') {
							api_version = parser.getText();
						} else if (text == 'created') {
							created = parser.getIntegerValue();
						} else if (text == 'data') {
							data = new Data(parser);
						} else if (text == 'livemode') {
							livemode = parser.getBooleanValue();
						} else if (text == 'pending_webhooks') {
							pending_webhooks = parser.getIntegerValue();
						} else if (text == 'request') {
							request = new Request(parser);
						} else if (text == 'type') {
							type = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StripeEventData consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Ach_credit_transfer {
		public String account_number {get;set;} 
		public String routing_number {get;set;} 
		public String fingerprint {get;set;} 
		public String swift_code {get;set;} 
		public String bank_name {get;set;} 
		public Object refund_routing_number {get;set;} 
		public Object refund_account_holder_type {get;set;} 
		public Object refund_account_holder_name {get;set;} 

		public Ach_credit_transfer(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'account_number') {
							account_number = parser.getText();
						} else if (text == 'routing_number') {
							routing_number = parser.getText();
						} else if (text == 'fingerprint') {
							fingerprint = parser.getText();
						} else if (text == 'swift_code') {
							swift_code = parser.getText();
						} else if (text == 'bank_name') {
							bank_name = parser.getText();
						} else if (text == 'refund_routing_number') {
							refund_routing_number = parser.readValueAs(Object.class);
						} else if (text == 'refund_account_holder_type') {
							refund_account_holder_type = parser.readValueAs(Object.class);
						} else if (text == 'refund_account_holder_name') {
							refund_account_holder_name = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Ach_credit_transfer consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static StripeEventData1 parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new StripeEventData1(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
}
	












}